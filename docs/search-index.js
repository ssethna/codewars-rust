var searchIndex = new Map(JSON.parse('[["codewars",{"t":"H","n":["main"],"q":[[0,"codewars"]],"i":"`","f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA=","P":[]}],["l5kyu",{"t":"CHH","n":["fundamentals","code","decode"],"q":[[0,"l5kyu"],[1,"l5kyu::fundamentals"],[3,"alloc::string"]],"i":"```","f":"`{{{d{b}}}f}0","D":"h","p":[[1,"str"],[1,"reference",null,null,1],[5,"String",3]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA=","P":[]}],["l6kyu",{"t":"CCHH","n":["algorithms","arrays","crack","create_phone_number"],"q":[[0,"l6kyu"],[2,"l6kyu::algorithms"],[3,"l6kyu::arrays"],[4,"alloc::string"],[5,"core::result"]],"i":"````","f":"``{b{{h{df}}}}{{{n{{l{j}}}}}b}","D":"j","p":[[5,"String",4],[1,"i32"],[1,"unit"],[6,"Result",5,null,1],[1,"u8"],[1,"slice"],[1,"reference",null,null,1]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA=","P":[]}],["l7kyu",{"t":"CCHHHHHH","n":["fundamentals","strings","decipher","digital_encipher","encipher","substitute","substitute_num","solution"],"q":[[0,"l7kyu"],[2,"l7kyu::fundamentals"],[7,"l7kyu::strings"],[8,"alloc::string"],[9,"alloc::vec"]],"i":"````````","f":"``{{{d{b}}}f}{{fh}{{j{h}}}}1{ll}{lh}{{{d{b}}{d{b}}}n}","D":"n","p":[[1,"str"],[1,"reference",null,null,1],[5,"String",8],[1,"i32"],[5,"Vec",9],[1,"char"],[1,"bool"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAYABwA=","P":[]}],["l8kyu",{"t":"CCCCHHHHHHHH","n":["arrays","fundamentals","math","strings","square_sum","derive","is_love","multi_table","no_space","to_alternating_case","summation","boolean_to_string"],"q":[[0,"l8kyu"],[4,"l8kyu::arrays"],[5,"l8kyu::fundamentals"],[10,"l8kyu::math"],[11,"l8kyu::strings"],[12,"alloc::vec"],[13,"alloc::string"]],"i":"````````````","f":"````{{{d{b}}}b}{{ff}h}{{jj}l}{nh}{hh}{{{Ab{A`}}}h}{bb}{lh}","D":"Aj","p":[[1,"i32"],[5,"Vec",12],[1,"u32"],[5,"String",13],[1,"u16"],[1,"bool"],[1,"u64"],[1,"str"],[1,"reference",null,null,1]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA=","P":[]}],["l8kyu",{"t":"CCCCHHHHHHHHH","n":["arrays","fundamentals","math","strings","square_sum","derive","is_love","multi_table","no_space","simple_multiplication","to_alternating_case","summation","boolean_to_string"],"q":[[0,"l8kyu"],[4,"l8kyu::arrays"],[5,"l8kyu::fundamentals"],[11,"l8kyu::math"],[12,"l8kyu::strings"],[13,"alloc::vec"],[14,"alloc::string"]],"i":"`````````````","f":"````{{{d{b}}}b}{{ff}h}{{jj}l}{nh}{hh}{A`A`}{{{Ad{Ab}}}h}{bb}{lh}","D":"Al","p":[[1,"i32"],[5,"Vec",13],[1,"u32"],[5,"String",14],[1,"u16"],[1,"bool"],[1,"u64"],[1,"u8"],[1,"str"],[1,"reference",null,null,1]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA=","P":[]}],["shared",{"t":"CPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPFPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPNNNNNNONNNNNNNNNOONNNNNNNNN","n":["kata","Algebra","Algorithms","Arrays","AsciiArt","BigIntegers","Binary","BinarySearchTrees","BinaryTrees","Bits","CellularAutomata","Ciphers","Combinatorics","Compilers","Cryptography","DataScience","DataStructures","Databases","DateTime","Debugging","DesignPatterns","DiscreteMathematics","DynamicProgramming","EsotericLanguages","FunctionalProgramming","Fundamentals","GameSolvers","Games","Geometry","GraphTheory","Interpreters","Iterators","Kata","L1kyu","L2kyu","L3kyu","L4kyu","L5kyu","L6kyu","L7kyu","L8kyu","LanguageFeatures","Level","LinearAlgebra","Lists","Logic","MachineLearning","Mathematics","Matrix","Memorization","Metaprogramming","Networks","NumberTheory","ObjectOrientedProgramming","Parsing","Performance","Permutations","Probibility","Puzzles","Queues","Recursion","Refactoring","Regex","Restricted","ReverseEngineering","Riddles","Scheduling","Searching","Security","Sets","Sorting","Stacks","Statistics","Strings","Tag","Trees","Tutorials","borrow","","","borrow_mut","","","description","fmt","","from","","","into","","","level","","tags","try_from","","","try_into","","","type_id","",""],"q":[[0,"shared"],[1,"shared::kata"],[104,"alloc::string"],[105,"core::fmt"],[106,"alloc::vec"],[107,"core::result"],[108,"core::any"]],"i":"`A`000000000000000000000000000000`j00000001`1111111111111111111111111111111`11f12012012012012000012012012","f":"`````````````````````````````````````````````````````````````````````````````{b{{b{c}}}{}}00{{{b{d}}}{{b{dc}}}{}}00{fh}{{{b{j}}{b{dl}}}n}{{{b{A`}}{b{dl}}}n}{cc{}}00{{}c{}}00{{{b{f}}}{{b{j}}}}{fj}{fAb}{c{{Ad{e}}}{}{}}00{{}{{Ad{c}}}{}}00{bAf}00","D":"A`","p":[[1,"reference",null,null,1],[0,"mut"],[5,"Kata",1],[5,"String",104],[6,"Level",1],[5,"Formatter",105],[8,"Result",105],[6,"Tag",1],[5,"Vec",106],[6,"Result",107,null,1],[5,"TypeId",108]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAGAAAgACAFQAXQALAA==","P":[[77,"T"],[83,""],[86,"T"],[89,"U"],[92,""],[95,"U,T"],[98,"U"],[101,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[176,279,410,503,609,650,2089]}